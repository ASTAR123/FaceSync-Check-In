# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'faceRecg.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you k
# now what you are doing.

from PyQt5.QtGui import QFont
import pandas as pd
import numpy as np
import os
from collections import Counter
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QVBoxLayout, QWidget, QDialog, QLabel, QMenuBar, QMenu, QCalendarWidget, QTextBrowser
import bg1_rc
from PyQt5.QtWidgets import QMessageBox
from FACE import face
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("*{\n"
"    background-color:rgb(225, 255, 255);\n"
"\n"
"}\n"
"\n"
"QFrame#frame1{\n"
"    border-radius: 30px;\n"
"    border-image: url(:/bg1/bg2.jpg);\n"
"}\n"
"\n"
"#frame2 {\n"
"    border-radius: 30px;\n"
"    background-color: rgba(180, 180, 180, 60);\n"
"}\n"
"\n"
"QTextBrowser#textBrowser {\n"
"border-radius: 30px;\n"
"background-color: rgba(98, 98, 98, 100);\n"
"    font: 25 12pt \"Microsoft YaHei\";\n"
"}\n"
"\n"
"QPushButton#pushButton{\n"
"border-radius: 10px;\n"
"    font: 25 12pt \"Microsoft YaHei\";\n"
"background-color: rgba(0, 170, 255, 120)\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame1 = QtWidgets.QFrame(self.centralwidget)
        self.frame1.setGeometry(QtCore.QRect(20, 20, 761, 511))
        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame1.setObjectName("frame1")
        self.frame2 = QtWidgets.QFrame(self.frame1)
        self.frame2.setGeometry(QtCore.QRect(0, 0, 761, 511))
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        self.textBrowser = QtWidgets.QTextBrowser(self.frame2)
        self.textBrowser.setGeometry(QtCore.QRect(20, 10, 711, 161))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(3)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(self.frame2)
        self.pushButton.setGeometry(QtCore.QRect(310, 380, 141, 51))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.handle_login)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuLog_in = QtWidgets.QMenu(self.menubar)
        self.menuLog_in.setObjectName("menuLog_in")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionFace_Recognition = QtWidgets.QAction(MainWindow)
        self.actionFace_Recognition.setObjectName("actionFace_Recognition")
        self.actionContact_Us = QtWidgets.QAction(MainWindow)
        self.actionContact_Us.setObjectName("actionContact_Us")
        self.actionContact_Us.triggered.connect(self.show_contact_us_dialog)
        self.actionRule = QtWidgets.QAction(MainWindow)
        self.actionRule.setObjectName("actionRule")
        self.actionRule.triggered.connect(self.show_rule_dialog)
        self.actionLog_in_with_Password = QtWidgets.QAction(MainWindow)
        self.actionLog_in_with_Password.setObjectName("actionLog_in_with_Password")
        self.actionCalendar = QtWidgets.QAction(MainWindow)
        self.actionCalendar.setObjectName("actionCalendar")
        self.actionCalendar.triggered.connect(self.show_calendar_dialog)
        self.menuLog_in.addAction(self.actionFace_Recognition)
        self.menuLog_in.addSeparator()
        self.menuLog_in.addAction(self.actionCalendar)
        self.menuLog_in.addSeparator()
        self.menuHelp.addAction(self.actionContact_Us)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionRule)
        self.menubar.addAction(self.menuLog_in.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei\'; font-size:12pt; font-weight:24; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'SimSun\'; font-weight:400;\">Welcome to G0191 Face Recognition with Machine Learning!</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'SimSun\'; font-weight:400;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'SimSun\'; font-weight:400;\">Please log in with your face and pay attention to your information.</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'SimSun\'; font-weight:400;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'SimSun\'; font-weight:600; text-decoration: underline;\">Check whether it is correct or not!</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Log in"))
        self.menuLog_in.setTitle(_translate("MainWindow", "Log in"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionFace_Recognition.setText(_translate("MainWindow", "Face Recognition"))
        self.actionContact_Us.setText(_translate("MainWindow", "Contact Us"))
        self.actionRule.setText(_translate("MainWindow", "Rule"))
        self.actionLog_in_with_Password.setText(_translate("MainWindow", "Calendar"))
        self.actionCalendar.setText(_translate("MainWindow", "Calendar"))

    def handle_login(self):
        recognized_faces = []

        for _ in range(1):  
            recognized_face = face()
            if recognized_face is not None:
                recognized_faces.extend(recognized_face)

        if recognized_faces:
            # Use Counter to count occurrences of each recognized face
            face_counts = Counter(recognized_faces)

            # Find the middle element if the list is not empty
            if len(recognized_faces) % 2 == 0:
                middle_index = len(recognized_faces) // 2
                most_common_result = recognized_faces[middle_index]
            else:
                most_common_result = max(face_counts, key=face_counts.get)
            message = f'Is this You?\n\nRecognized face: {most_common_result}'

            dialog = ConfirmationDialog(message)
            if dialog.exec_() == QDialog.Accepted:
                self.update_excel(1)
            else:
                self.update_excel(0)

    def show_contact_us_dialog(self):
        contact_us_dialog = ContactUsDialog()
        contact_us_dialog.exec_()

    def show_calendar_dialog(self):
        calendar_dialog = CalendarDialog()
        calendar_dialog.exec_()

    def show_rule_dialog(self):
        rule_dialog = RuleDialog()
        rule_dialog.exec_()
    
    def update_excel(self, value):
        excel_file_path = 'attendance.xlsx'
        sheet_name = 'Sheet1'

        if not os.path.exists(excel_file_path):
            df = pd.DataFrame({'Present': [value]})
            df.to_excel(excel_file_path, index=False, sheet_name=sheet_name)
        else:
            df = pd.read_excel(excel_file_path, sheet_name=sheet_name)
            
            if 'Present' not in df.columns:
                df['Present'] = np.nan
            
            df.at[0, 'Present'] = value
            
            df.to_excel(excel_file_path, index=False, sheet_name=sheet_name)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

class ContactUsDialog(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Contact Us")
        layout = QVBoxLayout(self)
        label = QLabel("Please contact us if you have issue about logging in:\n\nOur Contact Information:\n\nEmail: mec2109494@xmu.edu.my\n\nPhone: +60-1117675441")
        font = QFont()
        font.setFamily("Microsoft YaHei")
        font.setPointSize(14)
        label.setFont(font)

        layout.addWidget(label)

class CalendarDialog(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Calendar")

        calendar_widget = QCalendarWidget(self)

        layout = QVBoxLayout(self)
        layout.addWidget(calendar_widget)

class RuleDialog(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Usage Rules")

        text_browser = QTextBrowser(self)

        text_browser.setPlainText(
            "\n1. Rule 1: Please put your face at the center of the camera screen.\n\n"
            "2. Rule 2: If you got glass wearing, plesae take off your glass so that it won't make machine confused.\n\n"
            "3. Rule 3: Try your best to keep your face clean, tidy and stable position.\n\n"
        )
        font = QFont()
        font.setFamily("Microsoft YaHei")
        font.setPointSize(14)
        text_browser.setFont(font)
        self.resize(600, 400)

        layout = QVBoxLayout(self)
        layout.addWidget(text_browser)

class ConfirmationDialog(QDialog):
    def __init__(self, message):
        super().__init__()

        self.setWindowTitle("Confirm")
        layout = QVBoxLayout(self)

        label = QLabel(message)
        font = QFont("Microsoft YaHei", 12) 
        label.setFont(font)
        layout.addWidget(label)

        yes_button = QPushButton("Yes, it's me!")
        font = QFont("Microsoft YaHei", 12) 
        yes_button.clicked.connect(self.accept)
        layout.addWidget(yes_button)

        no_button = QPushButton("No, it's not me!")
        no_button.clicked.connect(self.reject)
        layout.addWidget(no_button)

if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()
